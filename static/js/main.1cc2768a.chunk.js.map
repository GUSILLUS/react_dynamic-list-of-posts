{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/api/comments.ts","components/PostDetails.tsx","components/api/users.ts","components/UserSelector.tsx","components/api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","posts","onSelect","selectedPost","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","updateComments","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","newComment","setNewComment","nameError","setNameError","emailError","setEmailError","commentError","setCommentError","isLoading","setIsLoading","errorSetter","field","setter","trim","onSubmit","event","preventDefault","finally","onReset","htmlFor","name","placeholder","value","onChange","target","onBlur","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","a","comments","PostDetails","activePost","isCommentsLoading","setIsCommentsLoading","setComments","isError","setIsError","addNewComment","setAddNewComment","useEffect","catch","removeComment","commentId","deleteComment","currentComents","filter","comment","length","email","commentBody","href","bodyComment","submitedComment","currentComments","getUsers","users","UserSelector","selectedUser","setUsers","showList","setShowList","role","user","handleUserSelect","getPosts","userId","App","setSelectedUser","userPosts","setUserPosts","postLoadingError","setPostLoadingError","setSelectedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cc2768a.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onSelect: (post: Post | null) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelect,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => {\n          const { id, title } = post;\n\n          const handleSelectPost = () => {\n            if (selectedPost?.id !== id) {\n              onSelect(post);\n            } else {\n              onSelect(null);\n            }\n          };\n\n          return (\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost?.id !== id },\n                  )}\n                  onClick={handleSelectPost}\n                >\n                  {(selectedPost?.id !== id)\n                    ? 'Open'\n                    : 'Close'}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  updateComments: (\n    name: string,\n    email: string,\n    bodyComment: string,\n  ) => Promise<void | Comment>\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  updateComments,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [newComment, setNewComment] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const errorSetter = (\n    field: string,\n    setter: (value: boolean) => void,\n  ) => {\n    if (!field.trim()) {\n      setter(true);\n    } else {\n      setter(false);\n    }\n  };\n\n  const clearForm = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setNewComment('');\n    setNameError(false);\n    setEmailError(false);\n    setCommentError(false);\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    if (authorName && authorEmail && newComment) {\n      updateComments(\n        authorName,\n        authorEmail,\n        newComment,\n      ).finally(() => {\n        setIsLoading(false);\n        setNewComment('');\n      });\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={clearForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            value={authorName}\n            onChange={(event) => {\n              setNameError(false);\n              setAuthorName(event.target.value);\n            }}\n            onBlur={() => errorSetter(authorName, setNameError)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            value={authorEmail}\n            onChange={(event) => {\n              setEmailError(false);\n              setAuthorEmail(event.target.value);\n            }}\n            onBlur={() => errorSetter(authorEmail, setEmailError)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': commentError },\n            )}\n            value={newComment}\n            onChange={(event) => {\n              setCommentError(false);\n              setNewComment(event.target.value);\n            }}\n            onBlur={() => errorSetter(newComment, setCommentError)}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(\n    url: string,\n    data: Omit<Comment, 'id'>,\n  ) => request<T>(url, 'POST', data),\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../../types/Comment';\nimport { client } from '../../utils/fetchClient';\n\nexport const getComments = async (postId: number) => {\n  const comments = await client.get<Comment[]>(`/comments?postId=${postId}`);\n\n  return comments || null;\n};\n\nexport const addCommentToList = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { addCommentToList, deleteComment, getComments } from './api/comments';\n\ntype Props = {\n  activePost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  activePost,\n}) => {\n  const { id, title, body } = activePost;\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [addNewComment, setAddNewComment] = useState(false);\n\n  useEffect(() => {\n    if (activePost) {\n      setIsCommentsLoading(true);\n      getComments(id)\n        .then(setComments)\n        .catch(() => setIsError(true))\n        .finally(() => setIsCommentsLoading(false));\n    }\n\n    return () => {\n      setComments([]);\n    };\n  }, [activePost]);\n\n  const createComment = (\n    name: string,\n    email: string,\n    bodyComment: string,\n  ) => (\n    addCommentToList({\n      name,\n      email,\n      body: bodyComment,\n      postId: activePost.id,\n    })\n      .then(submitedComment => setComments(\n        currentComments => [...currentComments, submitedComment],\n      ))\n      .catch(() => setIsError(true))\n  );\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments(currentComents => (\n          currentComents.filter(comment => comment.id !== commentId)\n        ));\n      })\n      .catch(() => setIsError(true));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${id}:${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {isError && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {!isCommentsLoading\n            && (!comments.length\n              ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )\n              : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => {\n                    const {\n                      name,\n                      email,\n                      id: commentId,\n                      body: commentBody,\n                    } = comment;\n\n                    return (\n                      <article\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                        key={commentId}\n                      >\n                        <div className=\"message-header\">\n                          <a\n                            href={`mailto:${email}`}\n                            data-cy=\"CommentAuthor\"\n                          >\n                            {name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => removeComment(commentId)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div\n                          className=\"message-body\"\n                          data-cy=\"CommentBody\"\n                        >\n                          {commentBody}\n                        </div>\n                      </article>\n                    );\n                  })}\n                </>\n              ))}\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                Misha Hrynko\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              Some comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n            <div\n              className=\"message-body\"\n              data-cy=\"CommentBody\"\n            >\n              One more comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {'Multi\\nline\\ncomment'}\n            </div>\n          </article>\n\n          {!addNewComment && !isCommentsLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setAddNewComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {addNewComment && (\n          <NewCommentForm\n            updateComments={createComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { User } from '../../types/User';\nimport { client } from '../../utils/fetchClient';\n\nexport const getUsers = async () => {\n  const users = await client.get<User[]>('/users');\n\n  return users || null;\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { getUsers } from './api/users';\n\ntype Props = {\n  onSelect: (user: User) => void,\n  selectedUser: User | null,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  onSelect,\n  selectedUser,\n}) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [showList, setShowList] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const handleUserSelect = (user: User) => {\n    onSelect(user);\n    setShowList(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': showList },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowList(true)}\n        >\n          <span>\n            {!selectedUser\n              ? 'Choose a user'\n              : selectedUser.name}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {showList && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users?.map(user => {\n              const { id, name } = user;\n\n              return (\n                <a\n                  href={`#user-${id}`}\n                  key={id}\n                  className={classNames(\n                    'dropdown-item',\n                    { 'is-active': selectedUser?.id === id },\n                  )}\n                  onClick={() => handleUserSelect(user)}\n                >\n                  {name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\n\nexport const getPosts = async (userId: number) => {\n  const posts = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n  return posts || null;\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts } from './components/api/posts';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [postLoadingError, setPostLoadingError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setSelectedPost(null);\n      setIsLoading(true);\n      getPosts(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => {\n          setPostLoadingError(true);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  onSelect={setSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (<Loader />)}\n\n                {postLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoading && userPosts && (userPosts.length > 0\n                  ? (\n                    <PostsList\n                      posts={userPosts}\n                      onSelect={setSelectedPost}\n                      selectedPost={selectedPost}\n                    />\n                  )\n                  : (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ))}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails activePost={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}